@page "/Ping"
@using NRpiMonitor.Services
@inject PingService PingService

<h3>Ping</h3>
<div class="row">
    <div class="col">
        <RadzenText Text="Host" TextStyle="TextStyle.Overline"/>
        <RadzenDropDown TValue="string" Data="@(Data?.Select(x => x.Host).Distinct())" Change="OnHostChanged"></RadzenDropDown>
        <RadzenButton Text="Load" ButtonStyle="ButtonStyle.Primary" Click="async () => await LoadData()"/>
    </div>
</div>
<div class="row" style="height: calc(60vh)">
    <div class="col-md-12">
        <RadzenChart Style="height: 100%">
            <RadzenLineSeries TItem="DisplayRes" Data="min" CategoryProperty="Timestamp" ValueProperty="Rtt" Smooth="true" Title="Min" LineType="LineType.Dotted"/> 
            <RadzenLineSeries TItem="DisplayRes" Data="avg" CategoryProperty="Timestamp" ValueProperty="Rtt" Smooth="true" Title="Avg"/> 
            <RadzenLineSeries TItem="DisplayRes" Data="max" CategoryProperty="Timestamp" ValueProperty="Rtt" Smooth="true" Title="Max" LineType="LineType.Dotted"/>
            <RadzenLegend Position="LegendPosition.Bottom"/>
            <RadzenCategoryAxis Formatter="@DateTimeFormatter"/>
        </RadzenChart>
    </div>
</div>

@code {
    private string? seletedHost;
    private List<PingCheckResult>? Data;
    private List<DisplayRes>? min;
    private List<DisplayRes>? avg;
    private List<DisplayRes>? max;

    private record DisplayRes(DateTime Timestamp, double Rtt);

    protected override async Task OnInitializedAsync()
    {
        Data = await PingService.GetResults(DateTime.Now.AddDays(-1));
        await base.OnInitializedAsync();
    }

    private async Task LoadData()
    {
        Data = await PingService.GetResults(DateTime.Now.AddDays(-1));
        OnHostChanged(seletedHost);
    }

    private void OnHostChanged(object value)
    {
        if (value is string host)
        {
            seletedHost = host;
            var hostsData = Data?.Where(x => x.Host == host).ToList();
            min = hostsData?.Select(x => new DisplayRes(x.Timestamp, x.MinRtt)).ToList();
            avg = hostsData?.Select(x => new DisplayRes(x.Timestamp, x.AvgRtt)).ToList();
            max = hostsData?.Select(x => new DisplayRes(x.Timestamp, x.MaxRtt)).ToList();
        }
    }
    
    private string DateTimeFormatter(object value)
    {
        if (value is DateTime timestamp)
        {
            return timestamp.ToString("HH:mm");
        }
        else
        {
            return value?.ToString() ?? string.Empty;
        }
    }
}
