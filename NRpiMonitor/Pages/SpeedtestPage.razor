@page "/Speedtest"
@using NRpiMonitor.Services
@using NRpiMonitor.Services.Models.Speedtest
@inject SpeedtestService SpeedService; 
<h3>Speedtest</h3>

<div class="row" style="height: calc(75vh)">
    <div class="col-md-12">
        <RadzenChart Style="height: 100%">
            <RadzenLineSeries TItem="SpeedResultDisplay" Data="Up" CategoryProperty="Timestamp" ValueProperty="Bandwidth" Smooth="true" Title="Upload"/> 
            <RadzenLineSeries TItem="SpeedResultDisplay" Data="Down" CategoryProperty="Timestamp" ValueProperty="Bandwidth" Smooth="true" Title="Download"/>
            <RadzenLegend Position="LegendPosition.Bottom"/>
            <RadzenCategoryAxis Formatter="@DateTimeFormatter">
                <RadzenGridLines Visible="true"/>
            </RadzenCategoryAxis>
            <RadzenValueAxis>
                <RadzenGridLines Visible="true"/>
            </RadzenValueAxis>
        </RadzenChart>
    </div>
</div>
<div class="row">
    <div class="col-md">
        <RadzenText Text="Not before" TextStyle="TextStyle.Overline"/>
        <RadzenDatePicker @bind-Value="@notBefore"/>
    </div>
    <div class="col-md">
        <RadzenText Text="Not after" TextStyle="TextStyle.Overline"/>
        <RadzenDatePicker @bind-Value="@notAfter"/>
    </div>
    <div class="col-md">
        <RadzenButton Click="() => ReloadData()">Load</RadzenButton>
    </div>
</div>

@code {
    private List<SpeedtestResult>? Data;
    private List<SpeedResultDisplay>? Up;
    private List<SpeedResultDisplay>? Down;

    private DateTime notBefore = DateTime.Now.AddDays(-1);
    private DateTime notAfter = DateTime.Now;
    
    private record SpeedResultDisplay(DateTime Timestamp, double Bandwidth);
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await ReloadData();
    }

    private async Task ReloadData()
    {
        Data = await SpeedService.GetResults(notBefore, notAfter);
        Up = Data.Select(x => new SpeedResultDisplay(x.Timestamp, x.Upload)).ToList();
        Down = Data.Select(x => new SpeedResultDisplay(x.Timestamp, x.Download)).ToList();
    }

    private string DateTimeFormatter(object value)
    {
        if (value is DateTime timestamp)
        {
            return timestamp.ToString("HH:mm");
        }
        else
        {
            return value?.ToString() ?? string.Empty;
        }
    }
}
